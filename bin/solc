#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    spawn = require("child_process").spawn,
    _ = require("underscore"),
    program = require("commander"),
    Promise = require("bluebird"),
    background = false;


function processArgs() {
  // --bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/m5/n0wkxyrj2pq7n3kgb_nd3grw0000gn/T/solc117193667
  program
    .description("Compiles the given Solidity input files (or the standard input if none given) and\n  outputs the components specified in the options at standard output or in files in\n  the output directory, if specified.\n\n  The options currently supported by solc-cli are:")
    .option("-V, --version", "output the version number")
    .on("version", function() {
      var solc = require("solc");
      console.log("solc, the solidity compiler commandline interface (solc-cli js wrapper for Node.js)");
      console.log("Version: " + solc.version());
      process.exit(0);
    })
    .usage("[options] [input_file...]")

    .option("-o, --output-dir [path]", "If given, creates one file per component contract/file at the specified directory.")
    .option("--combined-json [components...]", "Output a single json file containing the selected components. Supported components: abi,bin,devdoc,hashes,userdoc,gas")
    .option("--optimize", "Enable bytecode optimizer.")
    .option("--add-std", "Add standard contracts (currently ignored)")

    .option("--spawn-ipc", "Spawn IPC server daemon")
    .option("--stop-ipc", "Stop the IPC server daemon")
    .option("--ipc", "Use IPC, spawning server as necessary")

    .option("--all", "Enable all of the following components for output")
    .option("--abi", "ABI specification of the contracts.")
    .option("--bin", "Binary of the contracts in hex.")
    .option("--gas", "Estimate the maximal gas usage for each function.")
    .option("--hashes", "Function signature hashes of the contracts.")
    .option("--userdoc", "Natspec user documentation of all contracts.")
    .option("--devdoc", "Natspec developer documentation of all contracts.")
    .parse(process.argv);
}

function validateArgs() {
  if (program.outputDir === true) {
    console.log("ERROR: output dir not specified");
    program.outputHelp();
    process.exit(1);
  }
}

function spawnServer() {
  spawn(process.argv[0], [process.argv[1], "--spawn-ipc"], {detached: true});
}

function runServer() {
  var app = require('express')();
  app.use(require('body-parser').text());

  app.post('/compile', function (req, res, next) {
    res.send(JSON.stringify(compileSource(req.body)));
  });

  app.post('/shutdown', function(req, res) {
    res.send("ok").end();
    process.exit(0);
  });

  app.listen(8989, "127.0.0.1");
  background = true;
  program.all = true; // always output all components in API mode
}

function ipcReq(path, cb) {
  var http = require("http");
  return http.request({host: "127.0.0.1", port: 8989, method: "POST", path: path}, cb);
}

function compileIpc(source) {
  return new Promise(function(resolve, reject) {
    var req = ipcReq("/compile",
      function(res) {
        var buff = "";
        res.on("data", function(chunk) { buff += chunk; });
        res.on("end", function() { resolve(JSON.parse(buff)); });
      }
    );
    req.on("error", function(e) {
      reject(e);
    });
    req.setHeader("content-type", "text/plain");
    req.setHeader("content-length", source.length);
    req.write(source);
    req.end();
  });
}

function stopServer() {
  ipcReq("/shutdown").on("error", function() { /* ignore errors */ }).end();
}

function main() {
  processArgs();
  validateArgs();

  if (program.spawnIpc) {
    return runServer();
  }

  if (program.stopIpc) {
    return stopServer();
  }

  if (program.ipc) {
    processIpc();
    return;
  }

  if (!program.args || program.args.length === 0) {
    processStdin();
  } else {
    program.args.forEach(function(file) {
      compileSource(readFile(file));
    });
  }
}

var ipc_errors = 0;
function processIpc() {

  var try_compile = function(source) {
    compileIpc(source).then(function(res) {
      process.stdout.write(JSON.stringify(res));
      process.exit(0); // only support a single file for IPC for now
    }).catch(function(e) {
      if (ipc_errors >= 5) {
        process.exit(1);
      }
      ipc_errors++;
      if (e.code === "ECONNREFUSED") {
        // spawn and retry
        spawnServer();
        setTimeout(processIpc, 500);
        return;
      }
      console.log(e);
      process.exit(1);
    });
  };

  if (program.args.length > 0 ) {
    program.args.forEach(function(file) {
      var source = readFile(file);
      try_compile(source);
    });
  } else {
    readStdin().then(function(source) {
      try_compile(source);
    });
  }
}

var stdin_buff;
function readStdin() {
  return new Promise(function(resolve, reject) {
    if (stdin_buff !== undefined) {
      resolve(stdin_buff);
    }

    var buffer = "";

    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function(chunk) {
      if (chunk !== null) {
        buffer += chunk;
      }
    });

    process.stdin.on('end', function() {
      stdin_buff = buffer.trim();
      resolve(stdin_buff);
    });
  });
}

function processStdin() {
  readStdin().then(function(source) {
    compileSource(source);
  });
}

function readFile(filename) {
  if (!fs.existsSync(filename)) {
    console.error("ERROR: file does not exist:", filename);
    process.exit(1);
  }

  return fs.readFileSync(filename, "utf8");
}

function getCombinedData(contract, components) {
  var data = {};
  var junk = {"methods" : {}};
  components.forEach(function(component) {
    switch (component) {
      case "abi":
        data.abi = contract.interface;
        break;
      case "bin":
        data.bin = contract.bytecode;
        break;
      case "devdoc":
        data.devdoc = junk;
        break;
      case "userdoc":
        data.userdoc = junk;
        break;
      case "hashes":
        data.hashes = contract.functionHashes;
        break;
      case "gas":
        data.gas = contract.gasEstimates;
        break;
    }
  });
  return data;
}

function getComponents() {
  // abi,bin,devdoc,hashes,userdoc,gas
  var combined = program.combinedJson || "";
  var components = combined.split(/,/);
  if (program.bin || program.all) {
    components.push("bin");
  }
  if (program.abi || program.all) {
    components.push("abi");
  }
  if (program.gas || program.all) {
    components.push("gas");
  }
  if (program.devdoc || program.all) {
    components.push("devdoc");
  }
  if (program.userdoc || program.all) {
    components.push("userdoc");
  }
  if (program.hashes || program.all) {
    components.push("hashes");
  }
  return _.uniq(components);
}

function compileSource(source) {
  var solc = require("solc");
  var optimize = (program.optimize === true ? 1 : 0);
  var output = solc.compile(source, optimize);

  if (output.errors) {
    if (!program.outputDir && background !== true) {
      process.stdout.write(JSON.stringify(output));
    }
    return output;
  }

  var allContractData = {};

  Object.keys(output.contracts).forEach(function(contractName) {
    var contract = output.contracts[contractName];
    // console.log(contract);

    // gather for stdout
    allContractData[contractName] = getCombinedData(contract, getComponents());

    // write to files
    if (!program.outputDir) {
      return;
    }
    var baseFilename = program.outputDir + path.sep + contractName;

    if (program.bin || program.all) {
      fs.writeFileSync(baseFilename + ".bin", contract.bytecode);
    }
    if (program.abi || program.all) {
      fs.writeFileSync(baseFilename + ".abi", contract.interface);
    }
    if (program.gas || program.all) {
      fs.writeFileSync(baseFilename + ".gas", JSON.stringify(contract.gasEstimates));
    }

    // don't know what these are, put in stubs
    var junk = JSON.stringify({"methods" : {}});
    if (program.devdoc || program.all) {
      fs.writeFileSync(baseFilename + ".docdev", junk);
    }
    if (program.userdoc || program.all) {
      fs.writeFileSync(baseFilename + ".docuser", junk);
    }

    if (program.combinedJson) {
      var data = getCombinedData(contract, program.combinedJson.split(/,/));
      fs.writeFileSync(baseFilename + ".json", JSON.stringify(data));
    }

  });

  if (!program.outputDir && background !== true) {
    process.stdout.write(JSON.stringify(allContractData));
  }

  return allContractData;
}

main();
